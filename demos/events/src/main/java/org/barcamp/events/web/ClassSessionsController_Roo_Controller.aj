// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.barcamp.events.web;

import java.io.UnsupportedEncodingException;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.barcamp.events.models.ClassSession;
import org.barcamp.events.services.ClassSessionService;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ClassSessionsController_Roo_Controller {
    
    @Autowired
    ClassSessionService ClassSessionsController.classSessionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public java.lang.String ClassSessionsController.create(@Valid ClassSession classSession, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("classSession", classSession);
            addDateTimeFormatPatterns(uiModel);
            return "classsessions/create";
        }
        uiModel.asMap().clear();
        classSessionService.saveClassSession(classSession);
        return "redirect:/classsessions/" + encodeUrlPathSegment(classSession.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public java.lang.String ClassSessionsController.createForm(Model uiModel) {
        uiModel.addAttribute("classSession", new ClassSession());
        addDateTimeFormatPatterns(uiModel);
        return "classsessions/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public java.lang.String ClassSessionsController.show(@PathVariable("id") java.lang.Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("classsession", classSessionService.findClassSession(id));
        uiModel.addAttribute("itemId", id);
        return "classsessions/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public java.lang.String ClassSessionsController.list(@RequestParam(value = "page", required = false) java.lang.Integer page, @RequestParam(value = "size", required = false) java.lang.Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("classsessions", classSessionService.findClassSessionEntries(firstResult, sizeNo));
            float nrOfPages = (float) classSessionService.countAllClassSessions() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("classsessions", classSessionService.findAllClassSessions());
        }
        addDateTimeFormatPatterns(uiModel);
        return "classsessions/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public java.lang.String ClassSessionsController.update(@Valid ClassSession classSession, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("classSession", classSession);
            addDateTimeFormatPatterns(uiModel);
            return "classsessions/update";
        }
        uiModel.asMap().clear();
        classSessionService.updateClassSession(classSession);
        return "redirect:/classsessions/" + encodeUrlPathSegment(classSession.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public java.lang.String ClassSessionsController.updateForm(@PathVariable("id") java.lang.Long id, Model uiModel) {
        uiModel.addAttribute("classSession", classSessionService.findClassSession(id));
        addDateTimeFormatPatterns(uiModel);
        return "classsessions/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public java.lang.String ClassSessionsController.delete(@PathVariable("id") java.lang.Long id, @RequestParam(value = "page", required = false) java.lang.Integer page, @RequestParam(value = "size", required = false) java.lang.Integer size, Model uiModel) {
        ClassSession classSession = classSessionService.findClassSession(id);
        classSessionService.deleteClassSession(classSession);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/classsessions";
    }
    
    @ModelAttribute("classsessions")
    public Collection<ClassSession> ClassSessionsController.populateClassSessions() {
        return classSessionService.findAllClassSessions();
    }
    
    void ClassSessionsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("classSession_rundate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    java.lang.String ClassSessionsController.encodeUrlPathSegment(java.lang.String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
